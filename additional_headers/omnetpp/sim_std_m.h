//
// Generated file, do not edit! Created by opp_msgtool 6.0 from sim_std.msg.
//

#ifndef __OMNETPP_SIM_STD_M_H
#define __OMNETPP_SIM_STD_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace omnetpp {


}  // namespace omnetpp

// cplusplus {{
namespace omnetpp {
extern void std_sim_descriptor_dummy();
}
// }}


namespace omnetpp {


}  // namespace omnetpp


namespace omnetpp {

inline any_ptr toAnyPtr(const omnetpp::simtime_t *p) {return any_ptr(p);}
template<> inline omnetpp::simtime_t *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::simtime_t>(); }
template<> inline omnetpp::cNamedObject *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cNamedObject*>(ptr.get<cObject>()); }
template<> inline omnetpp::cOwnedObject *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cOwnedObject*>(ptr.get<cObject>()); }
template<> inline omnetpp::cNoncopyableOwnedObject *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cNoncopyableOwnedObject*>(ptr.get<cObject>()); }
template<> inline omnetpp::cSoftOwner *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cSoftOwner*>(ptr.get<cObject>()); }
inline any_ptr toAnyPtr(const omnetpp::cDisplayString *p) {return any_ptr(p);}
template<> inline omnetpp::cDisplayString *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cDisplayString>(); }
template<> inline omnetpp::cProperty *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cProperty*>(ptr.get<cObject>()); }
inline any_ptr toAnyPtr(const omnetpp::cIListener *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline omnetpp::cIListener *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cIListener>(); }
inline any_ptr toAnyPtr(const omnetpp::cComponent::SignalListenerList *p) {return any_ptr(p);}
template<> inline omnetpp::cComponent::SignalListenerList *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cComponent::SignalListenerList>(); }
template<> inline omnetpp::cComponent *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cComponent*>(ptr.get<cObject>()); }
template<> inline omnetpp::cChannel *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cChannel*>(ptr.get<cObject>()); }
template<> inline omnetpp::cIdealChannel *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cIdealChannel*>(ptr.get<cObject>()); }
template<> inline omnetpp::cDelayChannel *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cDelayChannel*>(ptr.get<cObject>()); }
template<> inline omnetpp::cDatarateChannel *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cDatarateChannel*>(ptr.get<cObject>()); }
template<> inline omnetpp::cModule *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cModule*>(ptr.get<cObject>()); }
template<> inline omnetpp::cSimpleModule *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cSimpleModule*>(ptr.get<cObject>()); }
template<> inline omnetpp::cComponentType *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cComponentType*>(ptr.get<cObject>()); }
template<> inline omnetpp::cModuleType *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cModuleType*>(ptr.get<cObject>()); }
template<> inline omnetpp::cChannelType *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cChannelType*>(ptr.get<cObject>()); }
template<> inline omnetpp::cRegistrationList *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cRegistrationList*>(ptr.get<cObject>()); }
template<> inline omnetpp::cGate *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cGate*>(ptr.get<cObject>()); }
template<> inline omnetpp::cArray *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cArray*>(ptr.get<cObject>()); }
template<> inline omnetpp::cEvent *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cEvent*>(ptr.get<cObject>()); }
template<> inline omnetpp::cMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cMessage*>(ptr.get<cObject>()); }
template<> inline omnetpp::cPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cPacket*>(ptr.get<cObject>()); }
template<> inline omnetpp::cRNG *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cRNG*>(ptr.get<cObject>()); }
template<> inline omnetpp::cRandom *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cRandom*>(ptr.get<cObject>()); }
template<> inline omnetpp::cUniform *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cUniform*>(ptr.get<cObject>()); }
template<> inline omnetpp::cExponential *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cExponential*>(ptr.get<cObject>()); }
template<> inline omnetpp::cNormal *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cNormal*>(ptr.get<cObject>()); }
template<> inline omnetpp::cTruncNormal *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cTruncNormal*>(ptr.get<cObject>()); }
template<> inline omnetpp::cGamma *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cGamma*>(ptr.get<cObject>()); }
template<> inline omnetpp::cBeta *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cBeta*>(ptr.get<cObject>()); }
template<> inline omnetpp::cErlang *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cErlang*>(ptr.get<cObject>()); }
template<> inline omnetpp::cChiSquare *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cChiSquare*>(ptr.get<cObject>()); }
template<> inline omnetpp::cStudentT *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cStudentT*>(ptr.get<cObject>()); }
template<> inline omnetpp::cCauchy *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cCauchy*>(ptr.get<cObject>()); }
template<> inline omnetpp::cTriang *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cTriang*>(ptr.get<cObject>()); }
template<> inline omnetpp::cWeibull *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cWeibull*>(ptr.get<cObject>()); }
template<> inline omnetpp::cParetoShifted *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cParetoShifted*>(ptr.get<cObject>()); }
template<> inline omnetpp::cIntUniform *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cIntUniform*>(ptr.get<cObject>()); }
template<> inline omnetpp::cBernoulli *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cBernoulli*>(ptr.get<cObject>()); }
template<> inline omnetpp::cBinomial *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cBinomial*>(ptr.get<cObject>()); }
template<> inline omnetpp::cGeometric *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cGeometric*>(ptr.get<cObject>()); }
template<> inline omnetpp::cNegBinomial *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cNegBinomial*>(ptr.get<cObject>()); }
template<> inline omnetpp::cPoisson *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cPoisson*>(ptr.get<cObject>()); }
template<> inline omnetpp::cStatistic *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cStatistic*>(ptr.get<cObject>()); }
template<> inline omnetpp::cStdDev *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cStdDev*>(ptr.get<cObject>()); }
template<> inline omnetpp::cAbstractHistogram *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cAbstractHistogram*>(ptr.get<cObject>()); }
inline any_ptr toAnyPtr(const omnetpp::cAbstractHistogram::Bin *p) {return any_ptr(p);}
template<> inline omnetpp::cAbstractHistogram::Bin *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cAbstractHistogram::Bin>(); }
template<> inline omnetpp::cHistogram *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cHistogram*>(ptr.get<cObject>()); }
template<> inline omnetpp::cIHistogramStrategy *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cIHistogramStrategy*>(ptr.get<cObject>()); }
template<> inline omnetpp::cFixedRangeHistogramStrategy *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cFixedRangeHistogramStrategy*>(ptr.get<cObject>()); }
template<> inline omnetpp::cPrecollectionBasedHistogramStrategy *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cPrecollectionBasedHistogramStrategy*>(ptr.get<cObject>()); }
template<> inline omnetpp::cDefaultHistogramStrategy *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cDefaultHistogramStrategy*>(ptr.get<cObject>()); }
template<> inline omnetpp::cAutoRangeHistogramStrategy *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cAutoRangeHistogramStrategy*>(ptr.get<cObject>()); }
template<> inline omnetpp::cPrecollectionBasedDensityEst *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cPrecollectionBasedDensityEst*>(ptr.get<cObject>()); }
template<> inline omnetpp::cKSplit *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cKSplit*>(ptr.get<cObject>()); }
template<> inline omnetpp::cPSquare *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cPSquare*>(ptr.get<cObject>()); }
template<> inline omnetpp::cExpression *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cExpression*>(ptr.get<cObject>()); }
inline any_ptr toAnyPtr(const omnetpp::cValue *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline omnetpp::cValue *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cValue>(); }
template<> inline omnetpp::cValueArray *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cValueArray*>(ptr.get<cObject>()); }
inline any_ptr toAnyPtr(const omnetpp::cValueMap::Entry *p) {return any_ptr(p);}
template<> inline omnetpp::cValueMap::Entry *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cValueMap::Entry>(); }
template<> inline omnetpp::cValueMap *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cValueMap*>(ptr.get<cObject>()); }
template<> inline omnetpp::cFSM *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cFSM*>(ptr.get<cObject>()); }
template<> inline omnetpp::cNedMathFunction *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cNedMathFunction*>(ptr.get<cObject>()); }
template<> inline omnetpp::cNedFunction *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cNedFunction*>(ptr.get<cObject>()); }
template<> inline omnetpp::cOutVector *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cOutVector*>(ptr.get<cObject>()); }
template<> inline omnetpp::cPar *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cPar*>(ptr.get<cObject>()); }
template<> inline omnetpp::cMsgPar *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cMsgPar*>(ptr.get<cObject>()); }
template<> inline omnetpp::cFutureEventSet *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cFutureEventSet*>(ptr.get<cObject>()); }
template<> inline omnetpp::cEventHeap *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cEventHeap*>(ptr.get<cObject>()); }
template<> inline omnetpp::cQueue *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cQueue*>(ptr.get<cObject>()); }
template<> inline omnetpp::cPacketQueue *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cPacketQueue*>(ptr.get<cObject>()); }
inline any_ptr toAnyPtr(const omnetpp::cHasher *p) {return any_ptr(p);}
template<> inline omnetpp::cHasher *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cHasher>(); }
template<> inline omnetpp::cFingerprintCalculator *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cFingerprintCalculator*>(ptr.get<cObject>()); }
template<> inline omnetpp::cSimulation *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cSimulation*>(ptr.get<cObject>()); }
template<> inline omnetpp::cScheduler *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cScheduler*>(ptr.get<cObject>()); }
template<> inline omnetpp::cSequentialScheduler *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cSequentialScheduler*>(ptr.get<cObject>()); }
template<> inline omnetpp::cRealTimeScheduler *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cRealTimeScheduler*>(ptr.get<cObject>()); }
inline any_ptr toAnyPtr(const omnetpp::cTopology::Node *p) {return any_ptr(p);}
template<> inline omnetpp::cTopology::Node *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cTopology::Node>(); }
inline any_ptr toAnyPtr(const omnetpp::cTopology::Link *p) {return any_ptr(p);}
template<> inline omnetpp::cTopology::Link *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cTopology::Link>(); }
template<> inline omnetpp::cTopology::LinkIn *fromAnyPtr(any_ptr ptr) { return static_cast<omnetpp::cTopology::LinkIn*>(ptr.get<omnetpp::cTopology::Link>()); }
template<> inline omnetpp::cTopology::LinkOut *fromAnyPtr(any_ptr ptr) { return static_cast<omnetpp::cTopology::LinkOut*>(ptr.get<omnetpp::cTopology::Link>()); }
template<> inline omnetpp::cTopology *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cTopology*>(ptr.get<cObject>()); }
template<> inline omnetpp::cXMLElement *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cXMLElement*>(ptr.get<cObject>()); }
inline any_ptr toAnyPtr(const omnetpp::cFigure::Point *p) {return any_ptr(p);}
template<> inline omnetpp::cFigure::Point *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cFigure::Point>(); }
inline any_ptr toAnyPtr(const omnetpp::cFigure::Rectangle *p) {return any_ptr(p);}
template<> inline omnetpp::cFigure::Rectangle *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cFigure::Rectangle>(); }
inline any_ptr toAnyPtr(const omnetpp::cFigure::Transform *p) {return any_ptr(p);}
template<> inline omnetpp::cFigure::Transform *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cFigure::Transform>(); }
inline any_ptr toAnyPtr(const omnetpp::cFigure::Color *p) {return any_ptr(p);}
template<> inline omnetpp::cFigure::Color *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cFigure::Color>(); }
inline any_ptr toAnyPtr(const omnetpp::cFigure::Font *p) {return any_ptr(p);}
template<> inline omnetpp::cFigure::Font *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cFigure::Font>(); }
inline any_ptr toAnyPtr(const omnetpp::cFigure::Pixmap *p) {return any_ptr(p);}
template<> inline omnetpp::cFigure::Pixmap *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cFigure::Pixmap>(); }
template<> inline omnetpp::cFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cGroupFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cGroupFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cPanelFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cPanelFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cAbstractLineFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cAbstractLineFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cLineFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cLineFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cArcFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cArcFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cPolylineFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cPolylineFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cAbstractShapeFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cAbstractShapeFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cRectangleFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cRectangleFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cOvalFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cOvalFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cRingFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cRingFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cPieSliceFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cPieSliceFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cPolygonFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cPolygonFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cPathFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cPathFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cAbstractTextFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cAbstractTextFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cTextFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cTextFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cLabelFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cLabelFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cAbstractImageFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cAbstractImageFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cImageFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cImageFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cIconFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cIconFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cPixmapFigure *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cPixmapFigure*>(ptr.get<cObject>()); }
template<> inline omnetpp::cCanvas *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cCanvas*>(ptr.get<cObject>()); }
inline any_ptr toAnyPtr(const omnetpp::cResultListener *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline omnetpp::cResultListener *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cResultListener*>(ptr.get<cObject>()); }
template<> inline omnetpp::cResultFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cResultFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::WarmupPeriodFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::WarmupPeriodFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::CountFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::CountFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::ConstantFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::ConstantFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::Constant0Filter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::Constant0Filter*>(ptr.get<cObject>()); }
template<> inline omnetpp::Constant1Filter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::Constant1Filter*>(ptr.get<cObject>()); }
template<> inline omnetpp::cNumericResultFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cNumericResultFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::IdentityFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::IdentityFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::SumFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::SumFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::MeanFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::MeanFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::MinFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::MinFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::MaxFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::MaxFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::TimeAverageFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::TimeAverageFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::RemoveRepeatsFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::RemoveRepeatsFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::cObjectResultFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cObjectResultFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::PacketBytesFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::PacketBytesFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::PacketBitsFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::PacketBitsFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::SumPerDurationFilter *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::SumPerDurationFilter*>(ptr.get<cObject>()); }
template<> inline omnetpp::cResultRecorder *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cResultRecorder*>(ptr.get<cObject>()); }
template<> inline omnetpp::cNumericResultRecorder *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cNumericResultRecorder*>(ptr.get<cObject>()); }
template<> inline omnetpp::VectorRecorder *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::VectorRecorder*>(ptr.get<cObject>()); }
template<> inline omnetpp::CountRecorder *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::CountRecorder*>(ptr.get<cObject>()); }
template<> inline omnetpp::LastValueRecorder *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::LastValueRecorder*>(ptr.get<cObject>()); }
template<> inline omnetpp::SumRecorder *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::SumRecorder*>(ptr.get<cObject>()); }
template<> inline omnetpp::MeanRecorder *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::MeanRecorder*>(ptr.get<cObject>()); }
template<> inline omnetpp::MinRecorder *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::MinRecorder*>(ptr.get<cObject>()); }
template<> inline omnetpp::MaxRecorder *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::MaxRecorder*>(ptr.get<cObject>()); }
template<> inline omnetpp::TimeAverageRecorder *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::TimeAverageRecorder*>(ptr.get<cObject>()); }
template<> inline omnetpp::StatisticsRecorder *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::StatisticsRecorder*>(ptr.get<cObject>()); }
template<> inline omnetpp::StatsRecorder *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::StatsRecorder*>(ptr.get<cObject>()); }
template<> inline omnetpp::HistogramRecorder *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::HistogramRecorder*>(ptr.get<cObject>()); }
template<> inline omnetpp::KSplitRecorder *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::KSplitRecorder*>(ptr.get<cObject>()); }
template<> inline omnetpp::PSquareRecorder *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::PSquareRecorder*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __OMNETPP_SIM_STD_M_H

