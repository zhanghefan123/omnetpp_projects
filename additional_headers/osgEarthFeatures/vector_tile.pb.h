// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector_tile.proto

#ifndef PROTOBUF_INCLUDED_vector_5ftile_2eproto
#define PROTOBUF_INCLUDED_vector_5ftile_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_vector_5ftile_2eproto 

namespace protobuf_vector_5ftile_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_vector_5ftile_2eproto
namespace mapnik {
namespace vector {
class tile;
class tileDefaultTypeInternal;
extern tileDefaultTypeInternal _tile_default_instance_;
class tile_feature;
class tile_featureDefaultTypeInternal;
extern tile_featureDefaultTypeInternal _tile_feature_default_instance_;
class tile_layer;
class tile_layerDefaultTypeInternal;
extern tile_layerDefaultTypeInternal _tile_layer_default_instance_;
class tile_value;
class tile_valueDefaultTypeInternal;
extern tile_valueDefaultTypeInternal _tile_value_default_instance_;
}  // namespace vector
}  // namespace mapnik
namespace google {
namespace protobuf {
template<> ::mapnik::vector::tile* Arena::CreateMaybeMessage<::mapnik::vector::tile>(Arena*);
template<> ::mapnik::vector::tile_feature* Arena::CreateMaybeMessage<::mapnik::vector::tile_feature>(Arena*);
template<> ::mapnik::vector::tile_layer* Arena::CreateMaybeMessage<::mapnik::vector::tile_layer>(Arena*);
template<> ::mapnik::vector::tile_value* Arena::CreateMaybeMessage<::mapnik::vector::tile_value>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mapnik {
namespace vector {

enum tile_GeomType {
  tile_GeomType_Unknown = 0,
  tile_GeomType_Point = 1,
  tile_GeomType_LineString = 2,
  tile_GeomType_Polygon = 3
};
bool tile_GeomType_IsValid(int value);
const tile_GeomType tile_GeomType_GeomType_MIN = tile_GeomType_Unknown;
const tile_GeomType tile_GeomType_GeomType_MAX = tile_GeomType_Polygon;
const int tile_GeomType_GeomType_ARRAYSIZE = tile_GeomType_GeomType_MAX + 1;

// ===================================================================

class tile_value : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:mapnik.vector.tile.value) */ {
 public:
  tile_value();
  virtual ~tile_value();

  tile_value(const tile_value& from);

  inline tile_value& operator=(const tile_value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tile_value(tile_value&& from) noexcept
    : tile_value() {
    *this = ::std::move(from);
  }

  inline tile_value& operator=(tile_value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const tile_value& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tile_value* internal_default_instance() {
    return reinterpret_cast<const tile_value*>(
               &_tile_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(tile_value* other);
  friend void swap(tile_value& a, tile_value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tile_value* New() const final {
    return CreateMaybeMessage<tile_value>(NULL);
  }

  tile_value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<tile_value>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const tile_value& from);
  void MergeFrom(const tile_value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tile_value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string string_value = 1;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 1;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // optional double double_value = 3;
  bool has_double_value() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 3;
  double double_value() const;
  void set_double_value(double value);

  // optional int64 int_value = 4;
  bool has_int_value() const;
  void clear_int_value();
  static const int kIntValueFieldNumber = 4;
  ::google::protobuf::int64 int_value() const;
  void set_int_value(::google::protobuf::int64 value);

  // optional float float_value = 2;
  bool has_float_value() const;
  void clear_float_value();
  static const int kFloatValueFieldNumber = 2;
  float float_value() const;
  void set_float_value(float value);

  // optional bool bool_value = 7;
  bool has_bool_value() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 7;
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional uint64 uint_value = 5;
  bool has_uint_value() const;
  void clear_uint_value();
  static const int kUintValueFieldNumber = 5;
  ::google::protobuf::uint64 uint_value() const;
  void set_uint_value(::google::protobuf::uint64 value);

  // optional sint64 sint_value = 6;
  bool has_sint_value() const;
  void clear_sint_value();
  static const int kSintValueFieldNumber = 6;
  ::google::protobuf::int64 sint_value() const;
  void set_sint_value(::google::protobuf::int64 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(tile_value)
  // @@protoc_insertion_point(class_scope:mapnik.vector.tile.value)
 private:
  void set_has_string_value();
  void clear_has_string_value();
  void set_has_float_value();
  void clear_has_float_value();
  void set_has_double_value();
  void clear_has_double_value();
  void set_has_int_value();
  void clear_has_int_value();
  void set_has_uint_value();
  void clear_has_uint_value();
  void set_has_sint_value();
  void clear_has_sint_value();
  void set_has_bool_value();
  void clear_has_bool_value();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  double double_value_;
  ::google::protobuf::int64 int_value_;
  float float_value_;
  bool bool_value_;
  ::google::protobuf::uint64 uint_value_;
  ::google::protobuf::int64 sint_value_;
  friend struct ::protobuf_vector_5ftile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tile_feature : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:mapnik.vector.tile.feature) */ {
 public:
  tile_feature();
  virtual ~tile_feature();

  tile_feature(const tile_feature& from);

  inline tile_feature& operator=(const tile_feature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tile_feature(tile_feature&& from) noexcept
    : tile_feature() {
    *this = ::std::move(from);
  }

  inline tile_feature& operator=(tile_feature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const tile_feature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tile_feature* internal_default_instance() {
    return reinterpret_cast<const tile_feature*>(
               &_tile_feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(tile_feature* other);
  friend void swap(tile_feature& a, tile_feature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tile_feature* New() const final {
    return CreateMaybeMessage<tile_feature>(NULL);
  }

  tile_feature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<tile_feature>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const tile_feature& from);
  void MergeFrom(const tile_feature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tile_feature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 tags = 2 [packed = true];
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 2;
  ::google::protobuf::uint32 tags(int index) const;
  void set_tags(int index, ::google::protobuf::uint32 value);
  void add_tags(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tags() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tags();

  // repeated uint32 geometry = 4 [packed = true];
  int geometry_size() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 4;
  ::google::protobuf::uint32 geometry(int index) const;
  void set_geometry(int index, ::google::protobuf::uint32 value);
  void add_geometry(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      geometry() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_geometry();

  // optional uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::mapnik::vector::tile_GeomType type() const;
  void set_type(::mapnik::vector::tile_GeomType value);

  // @@protoc_insertion_point(class_scope:mapnik.vector.tile.feature)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tags_;
  mutable int _tags_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > geometry_;
  mutable int _geometry_cached_byte_size_;
  ::google::protobuf::uint64 id_;
  int type_;
  friend struct ::protobuf_vector_5ftile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tile_layer : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:mapnik.vector.tile.layer) */ {
 public:
  tile_layer();
  virtual ~tile_layer();

  tile_layer(const tile_layer& from);

  inline tile_layer& operator=(const tile_layer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tile_layer(tile_layer&& from) noexcept
    : tile_layer() {
    *this = ::std::move(from);
  }

  inline tile_layer& operator=(tile_layer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const tile_layer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tile_layer* internal_default_instance() {
    return reinterpret_cast<const tile_layer*>(
               &_tile_layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(tile_layer* other);
  friend void swap(tile_layer& a, tile_layer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tile_layer* New() const final {
    return CreateMaybeMessage<tile_layer>(NULL);
  }

  tile_layer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<tile_layer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const tile_layer& from);
  void MergeFrom(const tile_layer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tile_layer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mapnik.vector.tile.feature features = 2;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 2;
  ::mapnik::vector::tile_feature* mutable_features(int index);
  ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_feature >*
      mutable_features();
  const ::mapnik::vector::tile_feature& features(int index) const;
  ::mapnik::vector::tile_feature* add_features();
  const ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_feature >&
      features() const;

  // repeated string keys = 3;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 3;
  const ::std::string& keys(int index) const;
  ::std::string* mutable_keys(int index);
  void set_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_keys(int index, ::std::string&& value);
  #endif
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  ::std::string* add_keys();
  void add_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_keys(::std::string&& value);
  #endif
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // repeated .mapnik.vector.tile.value values = 4;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 4;
  ::mapnik::vector::tile_value* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_value >*
      mutable_values();
  const ::mapnik::vector::tile_value& values(int index) const;
  ::mapnik::vector::tile_value* add_values();
  const ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_value >&
      values() const;

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 extent = 5 [default = 4096];
  bool has_extent() const;
  void clear_extent();
  static const int kExtentFieldNumber = 5;
  ::google::protobuf::uint32 extent() const;
  void set_extent(::google::protobuf::uint32 value);

  // required uint32 version = 15 [default = 1];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 15;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(tile_layer)
  // @@protoc_insertion_point(class_scope:mapnik.vector.tile.layer)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_name();
  void clear_has_name();
  void set_has_extent();
  void clear_has_extent();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_feature > features_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_value > values_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 extent_;
  ::google::protobuf::uint32 version_;
  friend struct ::protobuf_vector_5ftile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tile : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:mapnik.vector.tile) */ {
 public:
  tile();
  virtual ~tile();

  tile(const tile& from);

  inline tile& operator=(const tile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tile(tile&& from) noexcept
    : tile() {
    *this = ::std::move(from);
  }

  inline tile& operator=(tile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const tile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tile* internal_default_instance() {
    return reinterpret_cast<const tile*>(
               &_tile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(tile* other);
  friend void swap(tile& a, tile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tile* New() const final {
    return CreateMaybeMessage<tile>(NULL);
  }

  tile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<tile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const tile& from);
  void MergeFrom(const tile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef tile_value value;
  typedef tile_feature feature;
  typedef tile_layer layer;

  typedef tile_GeomType GeomType;
  static const GeomType Unknown =
    tile_GeomType_Unknown;
  static const GeomType Point =
    tile_GeomType_Point;
  static const GeomType LineString =
    tile_GeomType_LineString;
  static const GeomType Polygon =
    tile_GeomType_Polygon;
  static inline bool GeomType_IsValid(int value) {
    return tile_GeomType_IsValid(value);
  }
  static const GeomType GeomType_MIN =
    tile_GeomType_GeomType_MIN;
  static const GeomType GeomType_MAX =
    tile_GeomType_GeomType_MAX;
  static const int GeomType_ARRAYSIZE =
    tile_GeomType_GeomType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .mapnik.vector.tile.layer layers = 3;
  int layers_size() const;
  void clear_layers();
  static const int kLayersFieldNumber = 3;
  ::mapnik::vector::tile_layer* mutable_layers(int index);
  ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_layer >*
      mutable_layers();
  const ::mapnik::vector::tile_layer& layers(int index) const;
  ::mapnik::vector::tile_layer* add_layers();
  const ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_layer >&
      layers() const;

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(tile)
  // @@protoc_insertion_point(class_scope:mapnik.vector.tile)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_layer > layers_;
  friend struct ::protobuf_vector_5ftile_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// tile_value

// optional string string_value = 1;
inline bool tile_value::has_string_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tile_value::set_has_string_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tile_value::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tile_value::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_value();
}
inline const ::std::string& tile_value::string_value() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.value.string_value)
  return string_value_.GetNoArena();
}
inline void tile_value::set_string_value(const ::std::string& value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.value.string_value)
}
#if LANG_CXX11
inline void tile_value::set_string_value(::std::string&& value) {
  set_has_string_value();
  string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapnik.vector.tile.value.string_value)
}
#endif
inline void tile_value::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapnik.vector.tile.value.string_value)
}
inline void tile_value::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapnik.vector.tile.value.string_value)
}
inline ::std::string* tile_value::mutable_string_value() {
  set_has_string_value();
  // @@protoc_insertion_point(field_mutable:mapnik.vector.tile.value.string_value)
  return string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tile_value::release_string_value() {
  // @@protoc_insertion_point(field_release:mapnik.vector.tile.value.string_value)
  if (!has_string_value()) {
    return NULL;
  }
  clear_has_string_value();
  return string_value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tile_value::set_allocated_string_value(::std::string* string_value) {
  if (string_value != NULL) {
    set_has_string_value();
  } else {
    clear_has_string_value();
  }
  string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:mapnik.vector.tile.value.string_value)
}

// optional float float_value = 2;
inline bool tile_value::has_float_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tile_value::set_has_float_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tile_value::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tile_value::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
inline float tile_value::float_value() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.value.float_value)
  return float_value_;
}
inline void tile_value::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.value.float_value)
}

// optional double double_value = 3;
inline bool tile_value::has_double_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tile_value::set_has_double_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tile_value::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tile_value::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
inline double tile_value::double_value() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.value.double_value)
  return double_value_;
}
inline void tile_value::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.value.double_value)
}

// optional int64 int_value = 4;
inline bool tile_value::has_int_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tile_value::set_has_int_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tile_value::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tile_value::clear_int_value() {
  int_value_ = GOOGLE_LONGLONG(0);
  clear_has_int_value();
}
inline ::google::protobuf::int64 tile_value::int_value() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.value.int_value)
  return int_value_;
}
inline void tile_value::set_int_value(::google::protobuf::int64 value) {
  set_has_int_value();
  int_value_ = value;
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.value.int_value)
}

// optional uint64 uint_value = 5;
inline bool tile_value::has_uint_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tile_value::set_has_uint_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tile_value::clear_has_uint_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tile_value::clear_uint_value() {
  uint_value_ = GOOGLE_ULONGLONG(0);
  clear_has_uint_value();
}
inline ::google::protobuf::uint64 tile_value::uint_value() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.value.uint_value)
  return uint_value_;
}
inline void tile_value::set_uint_value(::google::protobuf::uint64 value) {
  set_has_uint_value();
  uint_value_ = value;
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.value.uint_value)
}

// optional sint64 sint_value = 6;
inline bool tile_value::has_sint_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tile_value::set_has_sint_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tile_value::clear_has_sint_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tile_value::clear_sint_value() {
  sint_value_ = GOOGLE_LONGLONG(0);
  clear_has_sint_value();
}
inline ::google::protobuf::int64 tile_value::sint_value() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.value.sint_value)
  return sint_value_;
}
inline void tile_value::set_sint_value(::google::protobuf::int64 value) {
  set_has_sint_value();
  sint_value_ = value;
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.value.sint_value)
}

// optional bool bool_value = 7;
inline bool tile_value::has_bool_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tile_value::set_has_bool_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tile_value::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tile_value::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
inline bool tile_value::bool_value() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.value.bool_value)
  return bool_value_;
}
inline void tile_value::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.value.bool_value)
}

// -------------------------------------------------------------------

// tile_feature

// optional uint64 id = 1;
inline bool tile_feature::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tile_feature::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tile_feature::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tile_feature::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 tile_feature::id() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.feature.id)
  return id_;
}
inline void tile_feature::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.feature.id)
}

// repeated uint32 tags = 2 [packed = true];
inline int tile_feature::tags_size() const {
  return tags_.size();
}
inline void tile_feature::clear_tags() {
  tags_.Clear();
}
inline ::google::protobuf::uint32 tile_feature::tags(int index) const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.feature.tags)
  return tags_.Get(index);
}
inline void tile_feature::set_tags(int index, ::google::protobuf::uint32 value) {
  tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.feature.tags)
}
inline void tile_feature::add_tags(::google::protobuf::uint32 value) {
  tags_.Add(value);
  // @@protoc_insertion_point(field_add:mapnik.vector.tile.feature.tags)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
tile_feature::tags() const {
  // @@protoc_insertion_point(field_list:mapnik.vector.tile.feature.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
tile_feature::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:mapnik.vector.tile.feature.tags)
  return &tags_;
}

// optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];
inline bool tile_feature::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tile_feature::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tile_feature::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tile_feature::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::mapnik::vector::tile_GeomType tile_feature::type() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.feature.type)
  return static_cast< ::mapnik::vector::tile_GeomType >(type_);
}
inline void tile_feature::set_type(::mapnik::vector::tile_GeomType value) {
  assert(::mapnik::vector::tile_GeomType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.feature.type)
}

// repeated uint32 geometry = 4 [packed = true];
inline int tile_feature::geometry_size() const {
  return geometry_.size();
}
inline void tile_feature::clear_geometry() {
  geometry_.Clear();
}
inline ::google::protobuf::uint32 tile_feature::geometry(int index) const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.feature.geometry)
  return geometry_.Get(index);
}
inline void tile_feature::set_geometry(int index, ::google::protobuf::uint32 value) {
  geometry_.Set(index, value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.feature.geometry)
}
inline void tile_feature::add_geometry(::google::protobuf::uint32 value) {
  geometry_.Add(value);
  // @@protoc_insertion_point(field_add:mapnik.vector.tile.feature.geometry)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
tile_feature::geometry() const {
  // @@protoc_insertion_point(field_list:mapnik.vector.tile.feature.geometry)
  return geometry_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
tile_feature::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable_list:mapnik.vector.tile.feature.geometry)
  return &geometry_;
}

// -------------------------------------------------------------------

// tile_layer

// required uint32 version = 15 [default = 1];
inline bool tile_layer::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tile_layer::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tile_layer::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tile_layer::clear_version() {
  version_ = 1u;
  clear_has_version();
}
inline ::google::protobuf::uint32 tile_layer::version() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.layer.version)
  return version_;
}
inline void tile_layer::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.layer.version)
}

// required string name = 1;
inline bool tile_layer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tile_layer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tile_layer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tile_layer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& tile_layer::name() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.layer.name)
  return name_.GetNoArena();
}
inline void tile_layer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.layer.name)
}
#if LANG_CXX11
inline void tile_layer::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapnik.vector.tile.layer.name)
}
#endif
inline void tile_layer::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapnik.vector.tile.layer.name)
}
inline void tile_layer::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapnik.vector.tile.layer.name)
}
inline ::std::string* tile_layer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:mapnik.vector.tile.layer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tile_layer::release_name() {
  // @@protoc_insertion_point(field_release:mapnik.vector.tile.layer.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tile_layer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mapnik.vector.tile.layer.name)
}

// repeated .mapnik.vector.tile.feature features = 2;
inline int tile_layer::features_size() const {
  return features_.size();
}
inline void tile_layer::clear_features() {
  features_.Clear();
}
inline ::mapnik::vector::tile_feature* tile_layer::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:mapnik.vector.tile.layer.features)
  return features_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_feature >*
tile_layer::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:mapnik.vector.tile.layer.features)
  return &features_;
}
inline const ::mapnik::vector::tile_feature& tile_layer::features(int index) const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.layer.features)
  return features_.Get(index);
}
inline ::mapnik::vector::tile_feature* tile_layer::add_features() {
  // @@protoc_insertion_point(field_add:mapnik.vector.tile.layer.features)
  return features_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_feature >&
tile_layer::features() const {
  // @@protoc_insertion_point(field_list:mapnik.vector.tile.layer.features)
  return features_;
}

// repeated string keys = 3;
inline int tile_layer::keys_size() const {
  return keys_.size();
}
inline void tile_layer::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& tile_layer::keys(int index) const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.layer.keys)
  return keys_.Get(index);
}
inline ::std::string* tile_layer::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:mapnik.vector.tile.layer.keys)
  return keys_.Mutable(index);
}
inline void tile_layer::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.layer.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void tile_layer::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.layer.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void tile_layer::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mapnik.vector.tile.layer.keys)
}
inline void tile_layer::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mapnik.vector.tile.layer.keys)
}
inline ::std::string* tile_layer::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:mapnik.vector.tile.layer.keys)
  return keys_.Add();
}
inline void tile_layer::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mapnik.vector.tile.layer.keys)
}
#if LANG_CXX11
inline void tile_layer::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mapnik.vector.tile.layer.keys)
}
#endif
inline void tile_layer::add_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mapnik.vector.tile.layer.keys)
}
inline void tile_layer::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mapnik.vector.tile.layer.keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
tile_layer::keys() const {
  // @@protoc_insertion_point(field_list:mapnik.vector.tile.layer.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
tile_layer::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:mapnik.vector.tile.layer.keys)
  return &keys_;
}

// repeated .mapnik.vector.tile.value values = 4;
inline int tile_layer::values_size() const {
  return values_.size();
}
inline void tile_layer::clear_values() {
  values_.Clear();
}
inline ::mapnik::vector::tile_value* tile_layer::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:mapnik.vector.tile.layer.values)
  return values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_value >*
tile_layer::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:mapnik.vector.tile.layer.values)
  return &values_;
}
inline const ::mapnik::vector::tile_value& tile_layer::values(int index) const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.layer.values)
  return values_.Get(index);
}
inline ::mapnik::vector::tile_value* tile_layer::add_values() {
  // @@protoc_insertion_point(field_add:mapnik.vector.tile.layer.values)
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_value >&
tile_layer::values() const {
  // @@protoc_insertion_point(field_list:mapnik.vector.tile.layer.values)
  return values_;
}

// optional uint32 extent = 5 [default = 4096];
inline bool tile_layer::has_extent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tile_layer::set_has_extent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tile_layer::clear_has_extent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tile_layer::clear_extent() {
  extent_ = 4096u;
  clear_has_extent();
}
inline ::google::protobuf::uint32 tile_layer::extent() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.layer.extent)
  return extent_;
}
inline void tile_layer::set_extent(::google::protobuf::uint32 value) {
  set_has_extent();
  extent_ = value;
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.layer.extent)
}

// -------------------------------------------------------------------

// tile

// repeated .mapnik.vector.tile.layer layers = 3;
inline int tile::layers_size() const {
  return layers_.size();
}
inline void tile::clear_layers() {
  layers_.Clear();
}
inline ::mapnik::vector::tile_layer* tile::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:mapnik.vector.tile.layers)
  return layers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_layer >*
tile::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:mapnik.vector.tile.layers)
  return &layers_;
}
inline const ::mapnik::vector::tile_layer& tile::layers(int index) const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.layers)
  return layers_.Get(index);
}
inline ::mapnik::vector::tile_layer* tile::add_layers() {
  // @@protoc_insertion_point(field_add:mapnik.vector.tile.layers)
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_layer >&
tile::layers() const {
  // @@protoc_insertion_point(field_list:mapnik.vector.tile.layers)
  return layers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vector
}  // namespace mapnik

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mapnik::vector::tile_GeomType> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_vector_5ftile_2eproto
