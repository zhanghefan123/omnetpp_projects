//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/projects/sr/sr_packet/SRHeader.msg.
//

#ifndef __INET_SRHEADER_M_H
#define __INET_SRHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class SRHeader;

}  // namespace inet

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

// cplusplus {{
	const B SR_HEADER_LENGTH = B(10); // SR 头部长度 (后续可以更改)
// }}

/**
 * Class generated from <tt>inet/projects/sr/sr_packet/SRHeader.msg:9</tt> by opp_msgtool.
 * <pre>
 * class SRHeader extends FieldsChunk
 * {
 *     chunkLength = SR_HEADER_LENGTH;   // SR 头部长度 (后续可以更改)
 *     int source_node_id;               // 源节点 id
 *     int destination_node_id;          // 目的节点 id
 *     int sid_index;                    // 当前sid索引
 *     int sids[];                       // sid 列表
 *     double packet_created_time;       // 数据包构建的时间
 * }
 * </pre>
 */
class INET_API SRHeader : public ::inet::FieldsChunk
{
  protected:
    int source_node_id = 0;
    int destination_node_id = 0;
    int sid_index = 0;
    int *sids = nullptr;
    size_t sids_arraysize = 0;
    double packet_created_time = 0;

  private:
    void copy(const SRHeader& other);

  protected:
    bool operator==(const SRHeader&) = delete;

  public:
    SRHeader();
    SRHeader(const SRHeader& other);
    virtual ~SRHeader();
    SRHeader& operator=(const SRHeader& other);
    virtual SRHeader *dup() const override {return new SRHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSource_node_id() const;
    virtual void setSource_node_id(int source_node_id);

    virtual int getDestination_node_id() const;
    virtual void setDestination_node_id(int destination_node_id);

    virtual int getSid_index() const;
    virtual void setSid_index(int sid_index);

    virtual void setSidsArraySize(size_t size);
    virtual size_t getSidsArraySize() const;
    virtual int getSids(size_t k) const;
    virtual void setSids(size_t k, int sids);
    virtual void insertSids(size_t k, int sids);
    [[deprecated]] void insertSids(int sids) {appendSids(sids);}
    virtual void appendSids(int sids);
    virtual void eraseSids(size_t k);

    virtual double getPacket_created_time() const;
    virtual void setPacket_created_time(double packet_created_time);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SRHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SRHeader& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::SRHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::SRHeader*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_SRHEADER_M_H

