//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/projects/dtn_network/dtn_packets/EpidemicHeader.msg.
//

#ifndef __INET_EPIDEMICHEADER_M_H
#define __INET_EPIDEMICHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class EpidemicHeader;

}  // namespace inet

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/contract/ipv4/Ipv4Address_m.h" // import inet.networklayer.contract.ipv4.Ipv4Address

#include "inet/projects/dtn_network/dtn_packets/TimeRecorder_m.h" // import inet.projects.dtn_network.dtn_packets.TimeRecorder


namespace inet {

// cplusplus {{
	const B EPIDEMIC_HEADER_LENGTH = B(6);
// }}

/**
 * Class generated from <tt>inet/projects/dtn_network/dtn_packets/EpidemicHeader.msg:12</tt> by opp_msgtool.
 * <pre>
 * class EpidemicHeader extends FieldsChunk
 * {
 *     short type; // packet type
 *     string uuid; // uuid used to uniquely identify the packet
 *     bool neighborAck;
 *     int msgIdLength;
 *     string msgIds[];
 *     Ipv4Address destAddr; // we need to store the destIp
 *     TimeRecorder *startTime; // the time when the packet is generated
 * }
 * </pre>
 */
class INET_API EpidemicHeader : public ::inet::FieldsChunk
{
  protected:
    short type = 0;
    ::omnetpp::opp_string uuid;
    bool neighborAck = false;
    int msgIdLength = 0;
    ::omnetpp::opp_string *msgIds = nullptr;
    size_t msgIds_arraysize = 0;
    Ipv4Address destAddr;
    TimeRecorder * startTime = nullptr;

  private:
    void copy(const EpidemicHeader& other);

  protected:
    bool operator==(const EpidemicHeader&) = delete;

  public:
    EpidemicHeader();
    EpidemicHeader(const EpidemicHeader& other);
    virtual ~EpidemicHeader();
    EpidemicHeader& operator=(const EpidemicHeader& other);
    virtual EpidemicHeader *dup() const override {return new EpidemicHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual short getType() const;
    virtual void setType(short type);

    virtual const char * getUuid() const;
    virtual void setUuid(const char * uuid);

    virtual bool getNeighborAck() const;
    virtual void setNeighborAck(bool neighborAck);

    virtual int getMsgIdLength() const;
    virtual void setMsgIdLength(int msgIdLength);

    virtual void setMsgIdsArraySize(size_t size);
    virtual size_t getMsgIdsArraySize() const;
    virtual const char * getMsgIds(size_t k) const;
    virtual void setMsgIds(size_t k, const char * msgIds);
    virtual void insertMsgIds(size_t k, const char * msgIds);
    [[deprecated]] void insertMsgIds(const char * msgIds) {appendMsgIds(msgIds);}
    virtual void appendMsgIds(const char * msgIds);
    virtual void eraseMsgIds(size_t k);

    virtual const Ipv4Address& getDestAddr() const;
    virtual Ipv4Address& getDestAddrForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<EpidemicHeader*>(this)->getDestAddr());}
    virtual void setDestAddr(const Ipv4Address& destAddr);

    virtual const TimeRecorder * getStartTime() const;
    virtual TimeRecorder * getStartTimeForUpdate() { handleChange();return const_cast<TimeRecorder *>(const_cast<EpidemicHeader*>(this)->getStartTime());}
    virtual void setStartTime(TimeRecorder * startTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EpidemicHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EpidemicHeader& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::EpidemicHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::EpidemicHeader*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_EPIDEMICHEADER_M_H

